```{r}
# set the working directory
setwd("~/Desktop/STATS4261_MidTerm")

# load relevant package and library
install.packages("pracma")
install.packages("nFactors")
library(pracma)
library(nFactors)

# import dataset and preview
data_sp500 <- read.delim("~/Desktop/STATS4261_MidTerm/data/m_sp500ret_3mtcm.txt", skip=1)
dim(data_sp500)
data_sp500 <- data_sp500[,-c(2,4)]

data_10stocks <- read.delim("~/Desktop/STATS4261_MidTerm/data/m_logret_10stocks.txt")
dim(data_10stocks)
data_10stocks <- data_10stocks[,-1]
data_10stocks <- data_10stocks[-c(157,158,159),]
dim(data_10stocks)
```

**(a) (5p) Fit CAPM to the ten stock. Give point estimates and 95% confidence intervals of alpha, beta, Sharpe index, and the Treynor index. (Hint: Use the delta method for the Sharpe and Treynor indices.)**
```{r}
#transfer from annual to monthly rate without percentage
riskFree <- data_sp500[,3]/12/100
head(riskFree)

# calculate excessive returns of 10 stocks and sp500 respectively
sp500_excs <- data_sp500[,2] - riskFree
stocks10_excs <- data_10stocks - t(repmat(riskFree,10,1))
sp500_excs <- as.matrix(sp500_excs)
stocks10_excs <- as.matrix(stocks10_excs)

# fit the regression model
fit <- lm(formula = stocks10_excs~sp500_excs)
alpha <- coef(fit)[1,]
beta <- coef(fit)[2,]

# calculate the residual of the regression model and sd of the fitting parameters
n <- nrow(data_sp500)
residual <- stocks10_excs-rep(1,n)%*%t(alpha)-sp500_excs%*%t(beta)
Matrix <- t(residual)%*%residual/n
beta_sd <- sqrt(diag(Matrix)/sum((sp500_excs-mean(sp500_excs))^2))
alpha_sd <- sqrt(diag(Matrix)*(1/n + mean(sp500_excs)^2/sum((sp500_excs-mean(sp500_excs))^2)))

# calculate the lower and upper bounds of the 95% confidence interval for alpha and beta
alpha_lower <- alpha - 1.96 * alpha_sd
alpha_upper <- alpha + 1.96 * alpha_sd
beta_lower <- beta - 1.96 * beta_sd
beta_upper <- beta + 1.96 * beta_sd
alpha
beta
alpha_lower 
alpha_upper 
beta_lower 
beta_upper

# calculate the lower and upper bounds of the 95% confidence interval for alpha and beta 
#for Sharpe ratio
mu <- apply(stocks10_excs,2,mean)
sigma <- apply(stocks10_excs,2,sd)
sharpe <- mu/sigma
sharpe_sd <- sqrt(1/n+mu^2/(2*sigma^2*n))
sharpe_lower <- sharpe - 1.96 * sharpe_sd
sharpe_upper <- sharpe + 1.96 * sharpe_sd
sharpe
sharpe_lower
sharpe_upper

# calculate the lower and upper bounds of the 95% confidence interval for alpha and beta 
#for Treynor ratio
treynor <- mu/beta
treynor_sd <- sqrt((1/beta^2)*(sigma^2/n)+(mu/beta^2)^2*beta_sd^2)
treynor_lower <- treynor - 1.96 * treynor_sd
treynor_upper <- treynor + 1.96 * treynor_sd
treynor
treynor_lower
treynor_upper
```

**(b) (5p) Use the bootstrap procedure in Section 3.5 to estimate the standard error of the point estimates of alpha, beta, and the Sharpe and Treynor indices.**

```{r}
# set the matrix to load the drawing with replacement later.
bootNum <- 1000
alpha_boot <- matrix(0,bootNum,10)
beta_boot <- matrix(0,bootNum,10)
sharpe_boot <- matrix(0,bootNum,10)
treynor_boot <- matrix(0,bootNum,10)

#sample and process bootstrap to get the distribution
for (i in 1:bootNum){
index <- sample(1:n, n, replace=T)
  stocks10_boot <- stocks10_excs[index,]
  sp500p_boot <- sp500_excs[index]
  model <- lm(stocks10_boot~sp500p_boot)
  alpha_boot[i,] <- coef(model)[1,]
  beta_boot[i,] <- coef(model)[2,]
  mu <- apply(stocks10_boot,2,mean)
  sigma <- apply(stocks10_boot,2,sd)
  sharpe_boot[i,] <- mu/sigma
  treynor_boot[i,] <- mu/beta_boot[i,]
}

alpha <- apply(alpha_boot, 2, mean)
beta <- apply(beta_boot, 2, mean)
sharpe <- apply(sharpe_boot, 2, mean)
treynor <- apply(treynor_boot, 2, mean)
alpha_sd <- apply(alpha_boot, 2, sd)
beta_sd <- apply(beta_boot, 2, sd)
sharpe_sd <- apply(sharpe_boot, 2, sd)
treynor_sd <- apply(treynor_boot, 2, sd)

alpha_sd 
beta_sd 
sharpe_sd 
treynor_sd 
```

**(c) (5p) Test for each stock the null hypothesis alpha = 0.**
```{r}
# estimate CAPM and test alpha=0 for each stock
capm_t = function(stock,sp500) {
	capm.fit = lm(stock~sp500)					
	capm_summary = summary(capm.fit)	
	capm_summary
}

# apply the function to each stock
t_result = apply(stocks10_excs[1:nrow(stocks10_excs),],2,
               FUN=capm_t,
               sp500=sp500_excs[1:nrow(sp500_excs),1])
t_result

# Based on the result of t test, we cannot reject the null hypothesis alpha=0 for each stock.
```

**(d) (5p) Use the regression model 1 to test for the ten stocks the null hypothesis alpha = 0. **
```{r}
#Since the F value is within the lower and upper bound, we cannot reject the null 
#hypothesis at the 95% significant level
fit <- lm(stocks10_excs~sp500_excs)
alpha <- coef(fit)[1,]
beta <- coef(fit)[2,]
sampleNum <- nrow(stocks10_excs)
stocksNum <- ncol(stocks10_excs)
residual <- stocks10_excs-rep(1,sampleNum)%*%t(alpha)-sp500_excs%*%t(beta)
Matrix <- t(residual)%*%residual/sampleNum
F_value <- ((sampleNum-stocksNum-1)/stocksNum)*alpha%*%solve(Matrix)%*%alpha/
(1+mean(sp500_excs)^2/mean((sp500_excs-mean(sp500_excs))^2))
lower <- qf(0.025,stocksNum, sampleNum-stocksNum-1)
upper <- qf(0.975,stocksNum, sampleNum-stocksNum-1)
F_value
lower
upper
```

**(e) (5p) Perform a factor analysis on the excess returns of the ten stocks. Show the factor loadings and rotated factor loadings. Explain your choice of the number of factors.**
```{r}
# factor loading (without rotation) 
fit1 <- factanal(stocks10_excs, 2, scores=c("regression"), rotation="none")
print(fit1, digits=2, cutoff=.3, sort=TRUE)
head(fit1$scores)

# try different rotations to see which type of rotation makes the factor more meaningful
# varimax rotation
fit2 <- factanal(stocks10_excs, 2, scores=c("regression"), rotation="varimax")
print(fit2, digits=2, cutoff=.3, sort=TRUE)
head(fit2$scores)

# promax rotation
fit3 <- factanal(stocks10_excs, 2, scores=c("regression"), rotation="promax")
print(fit3, digits=2, cutoff=.3, sort=TRUE)
head(fit3$scores)

# plot to decide the number of factors to extract. Based on the result, 2 components 
#should be sufficient because they already accounted for most of the total variability 
#in data (suggested by the eigen value)
ev <- eigen(cor(stocks10_excs)) # get eigenvalues
ap <- parallel(subject=nrow(stocks10_excs),var=ncol(stocks10_excs),
  rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)
```

**(f) (5p) Consider the model... (formula omitted due to char not set up with LaTex)**
```{r}
# The model is equivalent to stocks10_excs = beta1 * sp500.excs + (beta2 - beta1) * 
#I{t >= t0} * sp500.excs + error, if the coefficient of I{t>=t0} * sp500.excs = 0, 
#then beta1=beta2

t0 <- which(data_sp500[,1]=="Feb-01")
sp500_excs_after_t0 <- sp500_excs
sp500_excs_after_t0[1:t0-1] <- 0
model <- lm(stocks10_excs~sp500_excs+sp500_excs_after_t0-1)
summary(model)

#Null hypothesis of DELL and AMD are rejected at a 95% significant level.
```
